@namespace BlazorFlowly.Pages.Courses
@page "/courses"
@inject IChartService ChartService


<div>
    <Row Gutter="(32,8)" Align="middle">
        <AntDesign.Col Offset="3" >
            <label style=@labelStyle>Ligne</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <MultipleStringSelectorComponent Width="444" SetSelectedString="SetSelectedLine" ChoicesList="personNames"></MultipleStringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>Direction</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <MultipleStringSelectorComponent Width="444" SetSelectedString="SetSelectedDirection" ChoicesList="personNames"></MultipleStringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col Offset="3">
            <label style=@labelStyle>Service(s)</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <MultipleStringSelectorComponent Width="150" SetSelectedString="SetSelectedService" ChoicesList="personNames"></MultipleStringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>Course(s)</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <MultipleStringSelectorComponent Width="150" SetSelectedString="SetSelectedCourse" ChoicesList="personNames"></MultipleStringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>Variante(s)</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <MultipleStringSelectorComponent Width="150" SetSelectedString="SetSelectedVariant" ChoicesList="personNames"></MultipleStringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>Journée(s)</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <MultipleStringSelectorComponent Width="150" SetSelectedString="SetSelectedDay" ChoicesList="personNames"></MultipleStringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col Offset="3">
            <label style=@labelStyle>Période</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <DateInputComponent Style="width: 150px;" SetInput="SetStartDate" StartDate="DateTime.Now"></DateInputComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>au</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <DateInputComponent  Style="width: 150px;" SetInput="SetEndDate" StartDate="DateTime.Now"></DateInputComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>Horaire(s)</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <StringSelectorComponent Width="150" SetSelectedString="SetSelectedStartTime" ChoicesList="personNames"></StringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col>
            <label style=@labelStyle>à</label>       
        </AntDesign.Col>
        <AntDesign.Col>
            <StringSelectorComponent Width="150" SetSelectedString="SetSelectedEndTime" ChoicesList="personNames"></StringSelectorComponent>
        </AntDesign.Col>
        <AntDesign.Col Span="10" Offset="3">
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Search" Block>Rechercher</Button>
        </AntDesign.Col>
        <AntDesign.Col Span="2">
            <CheckboxComponent SetChecked="SetRegularDaysCheckboxValue" HelperContent="Inclure dans le résultat les jours réguliers" Label="Réguliers"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col>          
        </AntDesign.Col>
        <AntDesign.Col Span="2">
            <CheckboxComponent SetChecked="SetHolidaysCheckboxValue" HelperContent="Inclure dans le résultat les vacances scolaires" Label="Vacances"></CheckboxComponent>          
        </AntDesign.Col>
        <AntDesign.Col>          
        </AntDesign.Col>
        <AntDesign.Col Span="2">
            <CheckboxComponent SetChecked="SetBankDaysCheckboxValue" HelperContent="Inclure dans le résultat les jours fériés" Label="Fériés"></CheckboxComponent>           
        </AntDesign.Col>
        <AntDesign.Col>          
        </AntDesign.Col>
        <AntDesign.Col Span="2">
            <CheckboxComponent SetChecked="SetEventsCheckboxValue" HelperContent="Inclure dans le résultat les événements" Label="Evénements"></CheckboxComponent>            
        </AntDesign.Col>
        <AntDesign.Col Offset="3" >
            <label style=@labelStyle>Affichage</label>       
        </AntDesign.Col>
        <AntDesign.Col Span="5">
            <CheckboxComponent SetChecked="SetStatisticsCheckboxValue" HelperContent="Afficher les statistiques" Label="Statistiques"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col Span="5">
            <CheckboxComponent IsChecked="@DisplayServiceLoad" SetChecked="SetServiceLoadCheckboxValue" HelperContent="Afficher l'analyse des charges par service" Label="Charge par service"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col Span="5">
            <CheckboxComponent SetChecked="SetCourseLoadCheckboxValue" HelperContent="Afficher l'analyse des charges par course" Label="Charge par course"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col Span="4">
            <CheckboxComponent SetChecked="SetHourlyLoadCheckboxValue" HelperContent="Afficher l'analyse des charges par tranche horaire" Label="Charge par tranche horaire"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col Offset="3">
            <label style=@labelStyle></label> 
        </AntDesign.Col>
        <AntDesign.Col Span="5">
            <CheckboxComponent SetChecked="SetCourseTravelTimeCheckboxValue" HelperContent="Afficher l'analyse des temps de parcours par course" Label="Temps de parcours par course"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col Span="5">
            <CheckboxComponent SetChecked="SetHourlyTravelTimeCheckboxValue" HelperContent="Afficher l'analyse des temps de parcours par tranche horaire" Label="Temps de parcours par tranche horaire"></CheckboxComponent> 
        </AntDesign.Col>
        <AntDesign.Col Span="5">
            <CheckboxComponent SetChecked="SetCommercialSpeedCheckboxValue" HelperContent="Afficher l'analyse de la vitesse commerciale par course" Label="Vitesse commerciale par course"></CheckboxComponent> 
        </AntDesign.Col>
    </Row>
    <br />
    <Row Align="middle" Style="background: #788487; height: 50px">
        <AntDesign.Col Offset="3">
            <RadioComponent Possibilities="resultsFormattingPossibilities" Helpers="resultsFormattingHelpers" SetSelectedString="SetResultsFormatting" Style="@resultsFormatingRadioStyle"></RadioComponent>
        </AntDesign.Col>
    </Row>
    <br />
    <Row Align="middle">
        <AntDesign.Col Offset="3" Span="18">
            <HelperComponent> 
                <Content>
                    <p>A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.</p>
                </Content>   
            </HelperComponent>
        </AntDesign.Col>
    </Row>
    @if (DisplayStatistics){
        <br />
        <div data-track-content data-content-name="Statistics">
            <Row Gutter="(32,8)" Align="middle">
                <AntDesign.Col Offset="3" Span="9">
                    <CardTemplateComponent TitleStyle="text-align:center;">
                        <Title>
                            <b>Données Flowly</b>                 
                        </Title>
                        <Content>
                            <Row Justify="space-around">
                                <AntDesign.Col>
                                    <Statistic Title="Jours" Value="164" />
                                </AntDesign.Col>
                                <AntDesign.Col>
                                    <Statistic Title="Courses" Value="2855" />
                                </AntDesign.Col>
                                <AntDesign.Col>
                                    <Statistic Title="Déplacements" Value="30145" />
                                </AntDesign.Col>
                            </Row>
                        </Content>
                    </CardTemplateComponent>
                </AntDesign.Col>
                <AntDesign.Col Span="9">
                    <CardTemplateComponent TitleStyle="text-align:center;">
                        <Title>
                            <b>Coefficients</b>                 
                        </Title>
                        <Content>
                            <Row Justify="space-around">
                                <AntDesign.Col>
                                    <Statistic Title="Detection" Value="21" Suffix="%"/>
                                </AntDesign.Col>
                                <AntDesign.Col>
                                    <Statistic Title="Longueur" Value="9172" Suffix="m"/>
                                </AntDesign.Col>
                            </Row>
                        </Content>
                    </CardTemplateComponent>
                </AntDesign.Col>
            </Row>
        </div>
    }

    @if (DisplayCourseLoad){
        <br />
        <div data-track-content data-content-name="CourseLoad">
            <Row Align="middle">
                <AntDesign.Col Offset="3" Span="18">
                    <CardTemplateComponent>
                        <Title>
                            <Icon Type="line-chart" Theme="outline"/> 
                            <b>Analyse de la charge par course</b>                 
                        </Title>
                        <Content>
                            <Card Bordered="false">
                                <CardTabs>
                                    <Tabs DefaultActiveKey="2" Type="@TabType.Card">
                                        <TabPane Key="1" Tab="Données">
                                            <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        </TabPane>
                                        <TabPane Key="2" Tab="Graphique">
                                            <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        </TabPane>
                                        <TabPane Key="3" Tab="Tout">
                                            <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                            <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        </TabPane>
                                    </Tabs>
                                </CardTabs>
                            </Card>  
                        </Content>
                    </CardTemplateComponent>
                </AntDesign.Col>
            </Row>
        </div>
    }

    @if (DisplayHourlyLoad){
        <br />
        <div data-track-content data-content-name="HourlyLoad">
            <Row Align="middle">
                <AntDesign.Col Offset="3" Span="18">
                    <CardTemplateComponent>
                        <Title>
                            <Icon Type="line-chart" Theme="outline"/> 
                            <b>Analyse de la charge par tranche horaire</b>                 
                        </Title>
                        <Content>
                            <Card Bordered="false">
                                <CardTabs>
                                    <Tabs DefaultActiveKey="2" Type="@TabType.Card">
                                        <TabPane Key="1" Tab="Données">
                                            <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        </TabPane>
                                        <TabPane Key="2" Tab="Graphique">
                                            <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        </TabPane>
                                        <TabPane Key="3" Tab="Tout">
                                            <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                            <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        </TabPane>
                                    </Tabs>
                                </CardTabs>
                            </Card>  
                        </Content>
                    </CardTemplateComponent>
                </AntDesign.Col>
            </Row>
        </div>
    }

    @if (DisplayCourseTravelTime){
        <br />
        <Row Align="middle">
            <AntDesign.Col Offset="3" Span="18">
                <CardTemplateComponent>
                    <Title>
                        <Icon Type="line-chart" Theme="outline"/> 
                        <b>Analyse des temps de parcours par course</b>                 
                    </Title>
                    <Content>
                        <Card Bordered="false">
                            <CardTabs>
                                <Tabs DefaultActiveKey="2" Type="@TabType.Card">
                                    <TabPane Key="1" Tab="Données">
                                        <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                    <TabPane Key="2" Tab="Graphique">
                                        <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                    <TabPane Key="3" Tab="Tout">
                                        <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                </Tabs>
                            </CardTabs>
                        </Card>  
                    </Content>
                </CardTemplateComponent>
            </AntDesign.Col>
        </Row>   
    }

    @if (DisplayHourlyTravelTime){
        <br />
        <Row Align="middle">
            <AntDesign.Col Offset="3" Span="18">
                <CardTemplateComponent>
                    <Title>
                        <Icon Type="line-chart" Theme="outline"/> 
                        <b>Analyse des temps de parcours par tranche horaire</b>                 
                    </Title>
                    <Content>
                        <Card Bordered="false">
                            <CardTabs>
                                <Tabs DefaultActiveKey="2" Type="@TabType.Card">
                                    <TabPane Key="1" Tab="Données">
                                        <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                    <TabPane Key="2" Tab="Graphique">
                                        <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                    <TabPane Key="3" Tab="Tout">
                                        <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        <LineChart Title="Title_line" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                </Tabs>
                            </CardTabs>
                        </Card>  
                    </Content>
                </CardTemplateComponent>
            </AntDesign.Col>
    </Row> 
    }

    @if (DisplayCommercialSpeed){
       <br />
        <Row Align="middle">
            <AntDesign.Col Offset="3" Span="18">
                <CardTemplateComponent>
                    <Title>
                        <Icon Type="line-chart" Theme="outline"/> 
                        <b>Analyse de la vitesse commerciale par course</b>                 
                    </Title>
                    <Content>
                        <Card Bordered="false">
                            <CardTabs>
                                <Tabs DefaultActiveKey="2" Type="@TabType.Card">
                                    <TabPane Key="1" Tab="Données">
                                        <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                    <TabPane Key="2" Tab="Graphique">
                                        <StepLineChart Title="Title_stepline" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                    <TabPane Key="3" Tab="Tout">
                                        <HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                        <StepLineChart Title="Title_stepline" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitorsDataAsync()"/>
                                    </TabPane>
                                </Tabs>
                            </CardTabs>
                        </Card>  
                    </Content>
                </CardTemplateComponent>
            </AntDesign.Col>
        </Row> 
    }    
    <BarChart Title="Title_bar" XFieldName="date" YFieldName="visitors" DataGetter="ChartService.GetVisitDataAsync()"/>
</div>

@code
{
    //<HeatMapChart Title="Title_heatmap" DataGetter="ChartService.GetVisitorsDataAsync()"/>
    private List<string> personNames;
    private List<string> SelectedLines { get; set; } = new List<string>();
    private List<string> SelectedDirections  { get; set; } = new List<string>();
    private List<string> SelectedServices  { get; set; } = new List<string>();
    private List<string> SelectedCourses  { get; set; } = new List<string>();
    private List<string> SelectedVariants  { get; set; } = new List<string>();
    private List<string> SelectedDay  { get; set; } = new List<string>();
    private string SelectedStartTime  { get; set; }  = "";
    private string SelectedEndTime  { get; set; }  = "";

    private DateTime StartDate { get; set; } = DateTime.Now;
    private DateTime EndDate { get; set; } = DateTime.Now;

    private bool RegularDaysCheckboxValue { get; set; } = true;
    private bool HolidaysCheckboxValue { get; set; } = true;
    private bool BankDaysCheckboxValue { get; set; } = true;
    private bool EventsCheckboxValue { get; set; } = true;
    private bool DisplayStatistics { get; set; } = true;
    private bool DisplayServiceLoad { get; set; } = false;
    private bool DisplayCourseLoad { get; set; } = true;
    private bool DisplayHourlyLoad { get; set; } = true;
    private bool DisplayCourseTravelTime { get; set; } = true;
    private bool DisplayHourlyTravelTime { get; set; } = true;
    private bool DisplayCommercialSpeed { get; set; } = true;

    private List<string> resultsFormattingPossibilities;
    private List<string> resultsFormattingHelpers;
    private string SelectedResultsFormatting  { get; set; }  = "";
    private string resultsFormatingRadioStyle = "display: block; width: 320px; color: white";


    private string labelStyle = "display: block; width: 80px; text-align: center";


    protected override void OnInitialized(){
        personNames = new List<string> { "Jack", "Lucy", "YaoMing", "Daminou", "Thierry", "Benoit", "David", "Stephanie", "Matthieu", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"  };
        resultsFormattingPossibilities = new List<string> { "Résultats corrigés (Moyenne journalière)", "Résultats corrigés (Total sur la période)", "Résultats bruts"};
        resultsFormattingHelpers = new List<string> { "Afficher les résultats corrigés (moyenne journalière)", "Afficher les résultats corrigés (total sur la période)", "Afficher les résultats bruts"};
    }

    void SetSelectedLine(IEnumerable<string> selectedStrings){
        int i = 0;
        foreach (string item in selectedStrings){
            SelectedLines[i++] = item;
        }
        StateHasChanged();
    }

    void SetSelectedDirection(IEnumerable<string> selectedStrings){
        int i = 0;
        foreach (string item in selectedStrings){
            SelectedDirections[i++] = item;
        }
        StateHasChanged();
    }

    void SetSelectedService(IEnumerable<string> selectedStrings){
        int i = 0;
        foreach (string item in selectedStrings){
            SelectedServices[i++] = item;
        }
        StateHasChanged();
    }

    void SetSelectedCourse(IEnumerable<string> selectedStrings){
        int i = 0;
        foreach (string item in selectedStrings){
            SelectedCourses[i++] = item;
        }
        StateHasChanged();
    }

    void SetSelectedVariant(IEnumerable<string> selectedStrings){
        int i = 0;
        foreach (string item in selectedStrings){
            SelectedVariants[i++] = item;
        }
        StateHasChanged();
    }

    void SetSelectedDay(IEnumerable<string> selectedStrings){
        int i = 0;
        foreach (string item in selectedStrings){
            SelectedDay[i++] = item;
        }
        StateHasChanged();
    }

    void SetStartDate(DateTime dateInput){
        StartDate = dateInput;
        StateHasChanged();
    }

    void SetEndDate(DateTime dateInput){
        EndDate = dateInput;
        StateHasChanged();
    }

    void SetSelectedStartTime(string selectedString){
        SelectedStartTime = selectedString;
        StateHasChanged();
    }

    void SetSelectedEndTime(string selectedString){
        SelectedEndTime = selectedString;
        StateHasChanged();
    }

    void SetRegularDaysCheckboxValue(bool isChecked){
        RegularDaysCheckboxValue = isChecked;
        StateHasChanged();
    }
    void SetHolidaysCheckboxValue(bool isChecked){
        HolidaysCheckboxValue = isChecked;
        StateHasChanged();
    }
    void SetBankDaysCheckboxValue(bool isChecked){
        BankDaysCheckboxValue = isChecked;
        StateHasChanged();
    }
    void SetEventsCheckboxValue(bool isChecked){
        EventsCheckboxValue = isChecked;
        StateHasChanged();
    }
    void SetStatisticsCheckboxValue(bool isChecked){
        DisplayStatistics = isChecked;
        StateHasChanged();
    }
    void SetServiceLoadCheckboxValue(bool isChecked){
        DisplayServiceLoad = isChecked;
        StateHasChanged();
    }
    void SetCourseLoadCheckboxValue(bool isChecked){
        DisplayCourseLoad = isChecked;
        StateHasChanged();
    }
    void SetHourlyLoadCheckboxValue(bool isChecked){
        DisplayHourlyLoad = isChecked;
        StateHasChanged();
    }
    void SetCourseTravelTimeCheckboxValue(bool isChecked){
        DisplayCourseTravelTime = isChecked;
        StateHasChanged();
    }
    void SetHourlyTravelTimeCheckboxValue(bool isChecked){
        DisplayHourlyTravelTime = isChecked;
        StateHasChanged();
    }
    void SetCommercialSpeedCheckboxValue(bool isChecked){
        DisplayCommercialSpeed = isChecked;
        StateHasChanged();
    }
    void SetResultsFormatting(string selectedString){
        SelectedResultsFormatting = selectedString;
        StateHasChanged();
    }
}