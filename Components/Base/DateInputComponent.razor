@namespace BlazorFlowly.Components

@using  System.Globalization

@inject IJSRuntime jsRuntime
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize

@using BlazorFlowly.Components;

<TooltipComponent Title=@HelperContent>
	<input id="datepicker" style=@Style/>
</TooltipComponent>

@code {
	[Parameter]
	public string Style { get; set; } = "width: 120px;";

	[Parameter]
	public DateTime? StartDate { get; set; }

	DateTime? Date;

	[Parameter]
	public Action<DateTime> SetInput { get; set; }

	[Parameter]
	public string HelperContent { get; set; }   

	//<input type="date" style=@Style data-date-format="dd-mm-yyyy" data-date-startDate=@StartDate value="Date" @onchange=SetDateInput>  

	//<div class="input-group date" data-provide="datepicker">
	//	<input type="text" class="datepicker" style=@Style data-date-format="dd-mm-yyyy" data-date-startDate=@StartDate value="Date" @onchange=SetDateInput>
	//		<span class="input-group-addon"><i class="far fa-calendar-alt"></i></span>
	//</div>

	private void SetDateInput(ChangeEventArgs dateEvent){
		if(dateEvent.Value != null){
			Date = Convert.ToDateTime(dateEvent.Value);
			SetInput.Invoke((DateTime)Date);
		} 
	}

	bool disabledDate(DateTime date) {
		if(StartDate != null){
			return date < StartDate;
		}
		else{
			return false;
		}
	}

	protected override void OnParametersSet() {
		base.OnParametersSet();

		if (HelperContent == null) {
			HelperContent = GetLocalizedString("Date au format <b>JJ/MM/AAAA</b>");

		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender) {

        await base.OnAfterRenderAsync(firstRender);

		await JSInterops.InitDatePickers(jsRuntime, CultureInfo.CurrentCulture.Name.ToLower());
    }


	private string GetLocalizedString(string input)
    {
        return (string)Localize[input];
    }
}
